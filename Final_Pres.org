* Config/Preamble :noexport:

** Header
#+title: Complex and Hypercomplex @@latex:\\@@ Iterative Methods
#+AUTHOR: Samuel J Monson
#+EMAIL: monsonsamuel@seattleu.edu
#+DATE: 2023-05-16
#+BEAMER_HEADER: \institute{Seattle Univerisity}
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:2 ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+HTML_LINK_UP:
#+HTML_LINK_HOME:

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [aspectratio=169,t]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

** Emacs Config
#+startup: beamer

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  (setq org-latex-title-command (concat
     "\\begin{frame}\n"
     "\\maketitle\n"
     "\\end{frame}\n"
  ))
  (setq org-latex-listings t)
  (setq org-latex-images-centered nil)
  ;; export snippet translations
  (add-to-list 'org-export-snippet-translation-alist
             '("b" . "beamer"))
#+end_src

** LaTeX Config
*** Set Beamer Theme
#+BEAMER_THEME: focus
#+BEAMER_HEADER: \definecolor{main}{HTML}{93361f}
#+BEAMER_HEADER: \definecolor{background}{HTML}{D0D0D0}

*** Use Listings instead of verbatim
#+LATEX_HEADER: \usepackage{listings}

*** Fix Captions
#+LATEX_HEADER: \setbeamerfont{caption}{size=\footnotesize}

*** Animate
#+LATEX_HEADER: \usepackage{animate}

*** Define abs
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \DeclarePairedDelimiter\abs{\lvert}{\rvert} % ABS: abs{}

*** Steal some missing glyphs
#+BEAMER_HEADER: \setmathfont{Fira Math}
#+BEAMER_HEADER: \setmathfont{DejaVu Math TeX Gyre}[range=\vysmwhtcircle]
#+BEAMER_HEADER: \setmonofont{Hack}


*** Highlight
#+LATEX_HEADER: \newcommand{\mcb}[2]{\colorbox{#1}{$\displaystyle #2$}}

** Python Config

#+NAME: plt-fig-preamble
#+BEGIN_SRC python :results file :exports none :eval no
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

for foreground in ('axes.edgecolor', 'axes.labelcolor',
                   'boxplot.boxprops.color', 'boxplot.capprops.color',
                   'boxplot.flierprops.color', 'boxplot.flierprops.markeredgecolor',
                   'boxplot.whiskerprops.color', 'hatch.color', 'patch.edgecolor',
                   'text.color', 'xtick.color', 'ytick.color'):
    mpl.rcParams[foreground] = '#93361f'
for background in ('figure.facecolor', 'figure.edgecolor', 'axes.facecolor'):
    mpl.rcParams[background] = '#D0D0D0'

mpl.rcParams['font.sans-serif'].insert(0,'Fira Math')
mpl.rcParams['font.size'] = 14.0
plt.gca().set_aspect('equal')
plt.grid(True)
#+END_SRC

#+NAME: plt-fig-export
#+BEGIN_SRC python :results file :exports none :eval no
plt.savefig(path, bbox_inches='tight', dpi=300)
return path
#+END_SRC

#+NAME: plt-iteration
#+BEGIN_SRC python :results file :exports none :eval no
import numpy as np
import sympy as sp
def iter(z_0, f):
    z = z_0
    while True:
        yield z
        z = f(z)

plt.xlim(-1.5, 1.5)
plt.ylim(-1.5, 1.5)
plt.xlabel('Real')
plt.ylabel('Imag')
#+END_SRC

* Introduction

** Iteration

*** Function Iteration
:PROPERTIES:
    :BEAMER_env: definition
:END:

$f^0 := \symbf{I}$

$f^{k+1} := f \circ f^k$

*** Example
:PROPERTIES:
    :BEAMER_env: exampleblock
    :BEAMER_act: <2->
:END:

Given $f(x) = x + 1$,

\begin{align*}
    \onslide<3->{f^0(x) & = x \\}
    \onslide<4->{f^1(x) & = x + 1 \\}
    \onslide<5->{f^2(x) & = (x + 1) + 1 \\}
    \onslide<6->{f^3(x) & = \left((x + 1) + 1\right) + 1}
\end{align*}

** Complex Dynamics

*** Dynamical System
:PROPERTIES:
    :BEAMER_env: definition
:END:

A system that enacts rules on a set of variables to produce a state.

*** Complex Dynamics
:PROPERTIES:
    :BEAMER_env: definition
    :BEAMER_act: <2->
:END:

The study of _dynamical systems_ defined by complex functions.

*** Notes :noexport:

...

To review, a Dynamical System is a system that enacts rules on a set of variables to produce a state.

Complex Dynamics is the study of dynamical systems that operate on complex iterative functions.

The main goals of my research have been to explore the proprieties and connections of complex dynamics, gain an understanding of hypercomplex numbers, and to explore examples of hypercomplex dynamics.


** Complex Numbers

*** Complex Numbers
:PROPERTIES:
    :BEAMER_env: definition
:END:

$\symbf{i}^2 = -1$

$\{a + b \symbf{i} : a,b \in \symbb{R} \} \in \symbb{C}$

*** Addition
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_act: <2->
:END:

- @@b:<2->@@ Let $a,b,x,y \in \symbb{R}$,
\begin{align*}
    \onslide<3->{(a + b\symbf{i}) + (x + y\symbf{i})} \onslide<4->{& = (a + x) + (b + y)\symbf{i}}
\end{align*}

*** Multiplication
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_act: <5->
:END:

- @@b:<5->@@ Let $a,b,x,y \in \symbb{R}$,
\begin{align*}
    \onslide<6->{(a + b\symbf{i}) \times (x + y\symbf{i})} \onslide<7->{& = ax + ay\symbf{i} + bx\symbf{i} + by\symbf{i}^2 \\}
    \onslide<8->{& = (ax - by) + (ay + bx)\symbf{i}}
\end{align*}

* Complex Iterative Methods

** Complex Iteration

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2$

$z_0 = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$
- $f^1(z) \only<2>{= \left( \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i} \right)^2 = \left( \frac{1}{\sqrt{2}} \right)^2 - \left(\frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}}\right)^2 + \left(\frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}}\right)^2 \symbf{i}} = \symbf{i}$
- $f^2(z) = -1$
- $f^3(z) = 1$
- $f^4(z) = f^5(z) = f^6(z) = 1$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_1
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z
z_0 = 1/sp.sqrt(2) + 1/sp.sqrt(2) * sp.I
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='royalblue')
#+END_SRC

#+NAME: iter_1-0
#+HEADER: :var path="Figs/exports/Iter_1-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_1-1
#+HEADER: :var path="Figs/exports/Iter_1-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_1-2
#+HEADER: :var path="Figs/exports/Iter_1-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_1-3
#+HEADER: :var path="Figs/exports/Iter_1-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_1-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_1-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_1-2
#+ATTR_BEAMER: :overlay <4->
#+RESULTS: iter_1-3
#+LATEX: \end{center}

** Complex Iteration

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2 - \frac{1}{10} - \frac{1}{10} \symbf{i}$

$z_0 = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$
- $f^1(z) \only<2>{= -\frac{1}{10} + \left(1 - \frac{1}{10}\right)\symbf{i}} = -0.1 + 0.9\symbf{i}$
- $f^2(z) = -0.9-0.28\symbf{i}$
- $f^3(z) = 0.6316+0.404\symbf{i}$
- $f^4(z) \approx 0.13570256+0.4103328\symbf{i}$
- $f^5(z) \approx -0.24995782+0.01136642\symbf{i}$
- $f^6(z) \approx -0.03765028-0.10568225\symbf{i}$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_2
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z
z_0 = 1/sp.sqrt(2) + 1/sp.sqrt(2) * sp.I
prev_data = np.fromiter(iter(z_0, f), 'complex', 4)
plt.plot(prev_data.real, prev_data.imag, 'o--', color='royalblue')

f = lambda z: z*z - 1/10 - 1/10*sp.I
z_0 = 1/sp.sqrt(2) + 1/sp.sqrt(2) * sp.I
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='forestgreen')
#+END_SRC

#+NAME: iter_2-0
#+HEADER: :var path="Figs/exports/Iter_2-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-1
#+HEADER: :var path="Figs/exports/Iter_2-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-2
#+HEADER: :var path="Figs/exports/Iter_2-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-3
#+HEADER: :var path="Figs/exports/Iter_2-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-4
#+HEADER: :var path="Figs/exports/Iter_2-4.png" cnt=4
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-5
#+HEADER: :var path="Figs/exports/Iter_2-5.png" cnt=5
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-6
#+HEADER: :var path="Figs/exports/Iter_2-6.png" cnt=6
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_2-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_2-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_2-2
#+ATTR_BEAMER: :overlay <4>
#+RESULTS: iter_2-3
#+ATTR_BEAMER: :overlay <5>
#+RESULTS: iter_2-4
#+ATTR_BEAMER: :overlay <6>
#+RESULTS: iter_2-5
#+ATTR_BEAMER: :overlay <7->
#+RESULTS: iter_2-6
#+LATEX: \end{center}

** Group Activity

$f(z) = z^2 + c$

*** Easier
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
:END:
$c = -0.2 + 0 \symbf{i}$

$z_0 = 0.5 + 0 \symbf{i}$

*** Harder
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
:END:
$c = -0.2 + 0.4 \symbf{i}$

$z_0 = 0.5 - 0.5 \symbf{i}$

** Group Activity (Easier)

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2 + c$

$c = -0.2 + 0 \symbf{i}$

$z_0 = 0.5 + 0 \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = 0.5$
- $f^1(z) = 0.05$
- $f^2(z) = -0.1975$
- $f^3(z) = -0.16099375$
- $f^4(z) \approx -0.1740810125$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_3
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z - 0.2
z_0 = 0.5
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='royalblue')
#+END_SRC

#+NAME: iter_3-0
#+HEADER: :var path="Figs/exports/Iter_3-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-1
#+HEADER: :var path="Figs/exports/Iter_3-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-2
#+HEADER: :var path="Figs/exports/Iter_3-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-3
#+HEADER: :var path="Figs/exports/Iter_3-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-4
#+HEADER: :var path="Figs/exports/Iter_3-4.png" cnt=4
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_3-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_3-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_3-2
#+ATTR_BEAMER: :overlay <4>
#+RESULTS: iter_3-3
#+ATTR_BEAMER: :overlay <5->
#+RESULTS: iter_3-4
#+LATEX: \end{center}

** Group Activity (Harder)

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2 + c$

$c = -0.2 + 0.4 \symbf{i}$

$z_0 = 0.5 - 0.5 \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = 0.5 - 0.5 \symbf{i}$
- $f^1(z) = -0.2 - 0.1 \symbf{i}$
- $f^2(z) = -0.17 + 0.44 \symbf{i}$
- $f^3(z) = -0.3647 + 0.2504 \symbf{i}$
- $f^4(z) = -0.12969407 + 0.21735824 \symbf{i}$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_4
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z - 0.2 + 0.4*sp.I
z_0 = 0.5 - 0.5*sp.I
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='forestgreen')
#+END_SRC

#+NAME: iter_4-0
#+HEADER: :var path="Figs/exports/Iter_4-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-1
#+HEADER: :var path="Figs/exports/Iter_4-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-2
#+HEADER: :var path="Figs/exports/Iter_4-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-3
#+HEADER: :var path="Figs/exports/Iter_4-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-4
#+HEADER: :var path="Figs/exports/Iter_4-4.png" cnt=4
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_4-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_4-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_4-2
#+ATTR_BEAMER: :overlay <4>
#+RESULTS: iter_4-3
#+ATTR_BEAMER: :overlay <5->
#+RESULTS: iter_4-4
#+LATEX: \end{center}

** Implementation

*** Iteration (Python)
:PROPERTIES:
    :BEAMER_col: 0.50
    :BEAMER_env: block
:END:

#+BEGIN_SRC python -n :eval no
N = 128
B = 16
c = complex(-0.2, 0.4)
def iterate(z):
    for n in range(N):
        z = z*z + c
        if abs(z) > B: break
    return n
#+END_SRC

*** Graph
:PROPERTIES:
    :BEAMER_col: 0.45
:END:

#+NAME: iter_4-128
#+HEADER: :var path="Figs/exports/Iter_4-128.png" cnt=128
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
plt.xlim(-0.5, 0.5)
plt.ylim(-0.5, 0.5)
f = lambda z: z*z + complex(-0.2, 0.4)
z_0 = complex(0.5, -0.5)
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='forestgreen')
<<plt-fig-export>>
#+END_SRC

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <2-> :width 0.90\textwidth
#+RESULTS: iter_4-128
#+LATEX: \end{center}

** Iterative Fractals

*** Text :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.55
:END:

**** Complex Juila Set Example

Defined by iterative function in complex space

- $f_c (z) = z^2 + c$

- $\left\{ z_0 \in \symbb{C}: \abs{f^k_c \left(z_0 \right)} \in \symbb{C} \text{ as } k \to \infty\right\} \in K_c$

*** Julia Set :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.45
:END:

#+CAPTION: $f(z) = z^2 -0.675 - 0.112\symbf{i}$
#+ATTR_LATEX: :center yes :width 0.80\textwidth
[[./Figs/Fig_2v2.png]]

*** Notes :noexport:

To start,

On the right is an example of a complex dynamical system commonly called a Julia set, or more accurately a filled Julia set.

The left side shows the function and rule that define the set. To simply the syntax we re-define f to k to mean f composed k times.

A point, $z_0$, is in the set if it stays bounded as we iterate infinite times; bounded means that the point does not go to infinity.

* Hypercomplex Numbers

** TODO Quaternions

** Quaternions

*** Quaternion
:PROPERTIES:
    :BEAMER_env: definition
:END:

$\symbf{i}^2 = \symbf{j}^2 = \symbf{k}^2 = \symbf{ijk} = -1$

$\left\{ d + a\symbf{i} + b\symbf{j} + c\symbf{k} : a,b,c,d \in \symbb{R} \right\} \in \symbb{H}$

*** Proof
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

- @@b:<2->@@ $\symbf{i}^2 = \symbf{ijk}$

  #+LATEX: {\centering
  #+LATEX: $ \displaystyle
  \begin{aligned}
    \symbf{i}^{-1} \symbf{i}^2 & = \symbf{i}^{-1} \symbf{ijk} \\
    \symbf{i} & = \symbf{jk}
  \end{aligned}
  #+LATEX: $
  #+LATEX: \par}
- @@b:<3->@@ $\symbf{k}^2 = \symbf{ijk}$

  #+LATEX: {\centering
  #+LATEX: $ \displaystyle
  \begin{aligned}
    \symbf{k}^2 \symbf{k}^{-1} & = \symbf{ijk} \symbf{k}^{-1} \\
    \symbf{k} & = \symbf{ij}
  \end{aligned}
  #+LATEX: $
  #+LATEX: \par}
- @@b:<3->@@ $\symbf{j} = \symbf{ki}$

*** Proof
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

- @@b:<4->@@ $\symbf{i} = \symbf{jk}$

  #+LATEX: {\centering
  #+LATEX: $ \displaystyle
  \begin{aligned}
    \symbf{ji} & = \symbf{jjk} \\
    \symbf{ji} & = \symbf{j}^2 \symbf{k} \\
    \symbf{ji} & = -\symbf{k} \\
    -\symbf{k} & = \symbf{ji}
  \end{aligned}
  #+LATEX: $
  #+LATEX: \par}
- @@b:<5->@@ $-\symbf{i} = \symbf{kj}$
- @@b:<5->@@ $-\symbf{j} = \symbf{ik}$

** Hypercomplex (Quaternions)
:PROPERTIES:
    :BEAMER_env: fullframe
:END:

*** Let,

$\symbf{i}^2 = \symbf{j}^2 = \symbf{k}^2 = \symbf{ijk} = -1$

$p = d + a\symbf{i} + b\symbf{j} + c\symbf{k}$

$q = w + x\symbf{i} + y\symbf{j} + z\symbf{k}$

*** Equation :ignore:

\begin{align*}
    p \times q \only<1-2>{& = dw + dx\symbf{i} + dy\symbf{j} + dz\symbf{k} \\}
    \only<1-2>{& + aw\symbf{i} + ax\symbf{i}^2 + ay\symbf{ij} + az\symbf{ik} \\}
    \only<1-2>{& + bw\symbf{j} + bx\symbf{ji} + by\symbf{j}^2 + bz\symbf{jk} \\}
    \only<1-2>{& + cw\symbf{k} + cx\symbf{ki} + cy\symbf{kj} + cz\symbf{k}^2 \\}
    \only<2-3>{& = dw - ax - by - cz\only<4->{+} \\}
    \only<2-3>{& + dx\symbf{i} + aw\symbf{i} + bz\symbf{i} - cy\symbf{i} \\}
    \only<2-3>{& + dy\symbf{j} - az\symbf{j} + bw\symbf{j} + cx\symbf{j} \\}
    \only<2-3>{& + dz\symbf{k} + ay\symbf{k} - bx\symbf{k} + cw\symbf{k} \\}
    \onslide<4->{& = dw - \left\langle\begin{smallmatrix} a\\b\\c \end{smallmatrix}\right\rangle \cdot \left\langle\begin{smallmatrix} x\\y\\z \end{smallmatrix}\right\rangle \\}
    \onslide<4->{& + \left\langle\begin{matrix}}
    \onslide<4->{dx + aw + bz - cy \\}
    \onslide<4->{dy - az + bw + cx \\}
    \onslide<4->{dz + ay - bx + cw}
    \onslide<4->{\end{matrix}\right\rangle}
    \onslide<4->{\cdot \left\langle\begin{matrix} \symbf{i} \\ \symbf{j} \\ \symbf{k} \end{matrix}\right\rangle \\}
    \onslide<5->{& = dw - \left\langle\begin{smallmatrix} a\\b\\c \end{smallmatrix}\right\rangle \cdot \left\langle\begin{smallmatrix} x\\y\\z \end{smallmatrix}\right\rangle + \left(d \left\langle\begin{smallmatrix} x\\y\\z \end{smallmatrix}\right\rangle + w \left\langle\begin{smallmatrix} a\\b\\c \end{smallmatrix}\right\rangle + \left\langle\begin{smallmatrix} a\\b\\c \end{smallmatrix}\right\rangle \times \left\langle\begin{smallmatrix} x\\y\\z \end{smallmatrix}\right\rangle \right) \cdot \left\langle\begin{smallmatrix} \symbf{i}\\\symbf{j}\\\symbf{k} \end{smallmatrix}\right\rangle}
\end{align*}

** Iteration

#+NAME: iter_5
#+HEADER: :var path="Figs/exports/Iter_5.png" cnt=5
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
import quaternion
f = lambda z: z*z + np.quaternion(0.3,-.375,-.675,-.112)
z_0 = np.quaternion(0.5, -0.5, 0.5, -0.5)
data = np.fromiter(iter(z_0, f), 'quaternion', cnt+1)
w = []
x = []
y = []
z = []
for quat in data:
    w.append(quat.w)
    x.append(quat.x)
    y.append(quat.y)
    z.append(quat.z)

plt.xlabel('Real, j')
plt.ylabel('i, k')
plt.plot(w, x, 'o--', color='royalblue')
plt.plot(y, z, 'o--', color='forestgreen')
<<plt-fig-export>>
#+END_SRC

#+LATEX: \begin{center}
#+ATTR_LATEX: :height 0.70\textheight
#+RESULTS: iter_5
#+LATEX: \end{center}

* Hypercomplex Iterative Methods

** Implementation

*** Quaternion Multiplication

#+BEGIN_SRC python -n :eval no
def qMult(p, q):
    r = Quat(
        p.r*q.r – p.i*q.i – p.j*q.j - p.k*q.k,
        p.r*q.i + p.i*q.r + p.j*q.k - p.k*q.j,
        p.r*q.j – p.i*q.k + p.j*q.r + p.j*q.i,
        p.r*q.k + p.i*q.j – p.j*q.i + p.k*q.r
    )
    return r
#+END_SRC

** Implementation

*** Quaternion Square

#+BEGIN_SRC python -n :eval no
def qSquare(q):
    r = Quat(
        q.r*q.r – q.i*q.i – q.j*q.j - q.k*q.k,
        2*q.r*q.i,
        2*q.r*q.j,
        2*q.r*q.k
    )
    return r
#+END_SRC

** Implementation

*** Quaternion Add

#+BEGIN_SRC python -n :eval no
def qAdd(p, q):
    r = Quat(
        p.r + q.r,
        p.i + q.i,
        p.j + q.j,
        p.k + q.k
    )
    return r
#+END_SRC

** Implementation

*** Iteration

#+BEGIN_SRC python -n :eval no
N = 12
B = 16
c = Quat(-0.2, 0.4, -0.4, -0.4)
def iterate(z):
    for n in range(N):
        z = z*z + c
        if abs(z) > B: break
    return n
#+END_SRC

** TODO Ploting

** TODO Raytracing

** TODO Ray Marching

** TODO Normal Estimation

** Hypercomplex Iterative Fractals

***  Hypercomplex Juila Set Example :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.55
    :BEAMER_env: block
:END:

- Defined by iterative function in 4D Quaternion space

*** Hypercomplex Julia Set :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.45
:END:

#+CAPTION: $f(z) = z^2 + 0.3 - 0.375\symbf{i} - 0.675\symbf{j} - 0.112\symbf{k}$
#+ATTR_LATEX: :center yes :width 0.75\textwidth
[[./Figs/Fig_1v2.png]]

** Conclusion

#+LATEX: %\animategraphics[autoplay,interpolate,height=4.0cm,loop]{7}{Figs/Test/}{1}{14}
#+TOC: headlines 2

** References
:PROPERTIES:
    :BEAMER_opt: allowframebreaks,label=
 :END:
#+LATEX: \nocite{*}
#+LATEX: \bibliography{sources}
#+LATEX: \bibliographystyle{alpha}

** Questions?

#+LATEX: \begin{center}
[[https://github.com/scrufulufugus/senior-synthesis]]

#+ATTR_LATEX: :height 0.70\textheight
[[./Figs/qr.png]]
#+LATEX: \end{center}
