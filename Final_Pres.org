* Config/Preamble :noexport:

** Header
#+title: Complex and Hypercomplex @@latex:\\@@ Iterative Methods
#+AUTHOR: Samuel J Monson
#+EMAIL: monsonsamuel@seattleu.edu
#+DATE: 2023-05-16
#+BEAMER_HEADER: \institute{Seattle Univerisity}
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:2 \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:2 ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+HTML_LINK_UP:
#+HTML_LINK_HOME:

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [aspectratio=169,t]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

** Emacs Config
#+startup: beamer show2levels

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  (setq org-latex-title-command (concat
     "\\begin{frame}\n"
     "\\maketitle\n"
     "\\end{frame}\n"
  ))
  (setq org-latex-listings t)
  (setq org-latex-images-centered nil)
  ;; export snippet translations
  (add-to-list 'org-export-snippet-translation-alist
             '("b" . "beamer"))
#+end_src

** LaTeX Config
*** Set Beamer Theme
#+BEAMER_THEME: focus
#+BEAMER_HEADER: \definecolor{main}{HTML}{93361f}
#+BEAMER_HEADER: \definecolor{background}{HTML}{D0D0D0}
#+BEAMER_HEADER: \definecolor{royalblue}{HTML}{4169e1}
#+BEAMER_HEADER: \definecolor{forestgreen}{HTML}{228b22}

*** Use Listings instead of verbatim
#+LATEX_HEADER: \usepackage{listings}

*** Fix Captions
#+LATEX_HEADER: \usepackage{ccicons}
#+LATEX_HEADER: \usepackage[margin=3pt,font=scriptsize,labelfont=bf]{caption}

*** Animate
#+LATEX_HEADER: \usepackage{animate}

*** SVG
#+LATEX_HEADER: \usepackage{svg}

*** Define abs
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \DeclarePairedDelimiter\abs{\lvert}{\rvert} % ABS: abs{}

*** Configure fonts
#+BEAMER_HEADER: \setmathfont{Fira Math}
#+BEAMER_HEADER: \setmathfont{DejaVu Math TeX Gyre}[range={\vysmwhtcircle,\times,\vdots}]
#+BEAMER_HEADER: \setmonofont{Hack}

*** Environments
**** Angled Small Vector
#+LATEX_HEADER: \newenvironment{asvector}{\left\langle\begin{smallmatrix}}{\end{smallmatrix}\right\rangle}
**** Angled Vector
#+LATEX_HEADER: \newenvironment{avector}{\left\langle\begin{matrix}}{\end{matrix}\right\rangle}
**** Tight Align
#+LATEX_HEADER: \newenvironment{talign*}{\centering $\displaystyle\begin{aligned}}{\end{aligned}$\par}

** Python Config

#+NAME: plt-fig-preamble
#+BEGIN_SRC python :results file :exports none :eval no
from os.path import exists
# TODO: Come up with a better method of skipping graph gen
if exists(path):
    return path
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

for foreground in ('axes.edgecolor', 'axes.labelcolor',
                   'boxplot.boxprops.color', 'boxplot.capprops.color',
                   'boxplot.flierprops.color', 'boxplot.flierprops.markeredgecolor',
                   'boxplot.whiskerprops.color', 'hatch.color', 'patch.edgecolor',
                   'text.color', 'xtick.color', 'ytick.color'):
    mpl.rcParams[foreground] = '#93361f'
for background in ('figure.facecolor', 'figure.edgecolor', 'axes.facecolor'):
    mpl.rcParams[background] = '#D0D0D0'

mpl.rcParams['font.sans-serif'].insert(0,'Fira Math')
mpl.rcParams['font.size'] = 14.0
plt.gca().set_aspect('equal')
plt.grid(True)
plt.rcParams['axes.grid'] = True
#+END_SRC

#+NAME: plt-fig-export
#+BEGIN_SRC python :results file :exports none :eval no
plt.savefig(path, bbox_inches='tight', dpi=300)
return path
#+END_SRC

#+NAME: plt-iteration
#+BEGIN_SRC python :results file :exports none :eval no
import numpy as np
import sympy as sp
def iter(z_0, f):
    z = z_0
    while True:
        yield z
        z = f(z)

plt.xlim(-1.5, 1.5)
plt.ylim(-1.5, 1.5)
plt.xlabel('Real')
plt.ylabel('Imag')
#+END_SRC

* Introduction :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

** Definitions

*** Iterative Method
:PROPERTIES:
    :BEAMER_env: definition
:END:

A sequence where each value in the sequence is defined by the previous value.

*** Dynamical System
:PROPERTIES:
    :BEAMER_env: definition
    :BEAMER_act: <2->
:END:

A system that enacts rules on a set of variables to produce a state.

*** Complex Dynamics
:PROPERTIES:
    :BEAMER_env: definition
    :BEAMER_act: <3->
:END:

The study of _dynamical systems_ defined by complex functions.

*** Fractal :noexport:
:PROPERTIES:
    :BEAMER_env: definition
    :BEAMER_act: <4->
:END:

TODO

* Iteration

** Iteration

*** Function Iteration
:PROPERTIES:
    :BEAMER_env: definition
:END:

$f^0 := \symbf{I}$

$f^{k+1} := f \circ f^k$

*** Example
:PROPERTIES:
    :BEAMER_env: exampleblock
    :BEAMER_act: <2->
:END:

Given $f(x) = x + 1$,

\begin{talign*}
    \onslide<3->{f^0(x) & = x \\}
    \onslide<4->{f^1(x) & = x + 1 \\}
    \onslide<5->{f^2(x) & = (x + 1) + 1 \\}
    \onslide<6->{f^3(x) & = \left((x + 1) + 1\right) + 1 \\}
    \onslide<6->{\vdots}
\end{talign*}

* Complex Iterative Methods

** Complex Numbers

*** Complex Numbers
:PROPERTIES:
    :BEAMER_env: definition
:END:

$\symbf{i}^2 = -1$

$\{a + b \symbf{i} : a,b \in \symbb{R} \} \in \symbb{C}$

*** Addition
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_act: <2->
:END:

Let $a,b,x,y \in \symbb{R}$,

#+LATEX: \vspace{\baselineskip}
\begin{talign*}
    \onslide<3->{(a + b\symbf{i}) + (x + y\symbf{i})} \onslide<4->{& = (a + x) + (b + y)\symbf{i}}
\end{talign*}

*** Multiplication
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :BEAMER_act: <5->
:END:

Let $a,b,x,y \in \symbb{R}$,

#+LATEX: \vspace{\baselineskip}
\begin{talign*}
    \onslide<6->{(a + b\symbf{i}) \ast (x + y\symbf{i})} \onslide<7->{& = ax + ay\symbf{i} + bx\symbf{i} + by\symbf{i}^2 \\}
    \onslide<8->{& = (ax - by) + (ay + bx)\symbf{i}}
\end{talign*}

** Complex Iteration

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2$

$z_0 = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$
- $f^1(z) \only<2>{= \left( \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i} \right)^2 = \left( \frac{1}{\sqrt{2}} \right)^2 - \left(\frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}}\right)^2 + \left(\frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}}\right)^2 \symbf{i}} = \symbf{i}$
- $f^2(z) = -1$
- $f^3(z) = 1$
- $f^4(z) = f^5(z) = f^6(z) = 1$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_1
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z
z_0 = 1/sp.sqrt(2) + 1/sp.sqrt(2) * sp.I
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='royalblue')
#+END_SRC

#+NAME: iter_1-0
#+HEADER: :var path="Figs/exports/Iter_1-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_1-1
#+HEADER: :var path="Figs/exports/Iter_1-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_1-2
#+HEADER: :var path="Figs/exports/Iter_1-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_1-3
#+HEADER: :var path="Figs/exports/Iter_1-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_1>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_1-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_1-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_1-2
#+ATTR_BEAMER: :overlay <4->
#+RESULTS: iter_1-3
#+LATEX: \end{center}

** Complex Iteration

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2 - \frac{1}{10} - \frac{1}{10} \symbf{i}$

$z_0 = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = \frac{1}{\sqrt{2}} + \frac{1}{\sqrt{2}} \symbf{i}$
- $f^1(z) \only<2>{= -\frac{1}{10} + \left(1 - \frac{1}{10}\right)\symbf{i}} = -0.1 + 0.9\symbf{i}$
- $f^2(z) = -0.9-0.28\symbf{i}$
- $f^3(z) = 0.6316+0.404\symbf{i}$
- $f^4(z) \approx 0.13570256+0.4103328\symbf{i}$
- $f^5(z) \approx -0.24995782+0.01136642\symbf{i}$
- $f^6(z) \approx -0.03765028-0.10568225\symbf{i}$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_2
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z
z_0 = 1/sp.sqrt(2) + 1/sp.sqrt(2) * sp.I
prev_data = np.fromiter(iter(z_0, f), 'complex', 4)
plt.plot(prev_data.real, prev_data.imag, 'o--', color='royalblue')

f = lambda z: z*z - 1/10 - 1/10*sp.I
z_0 = 1/sp.sqrt(2) + 1/sp.sqrt(2) * sp.I
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='forestgreen')
#+END_SRC

#+NAME: iter_2-0
#+HEADER: :var path="Figs/exports/Iter_2-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-1
#+HEADER: :var path="Figs/exports/Iter_2-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-2
#+HEADER: :var path="Figs/exports/Iter_2-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-3
#+HEADER: :var path="Figs/exports/Iter_2-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-4
#+HEADER: :var path="Figs/exports/Iter_2-4.png" cnt=4
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-5
#+HEADER: :var path="Figs/exports/Iter_2-5.png" cnt=5
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_2-6
#+HEADER: :var path="Figs/exports/Iter_2-6.png" cnt=6
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_2>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_2-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_2-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_2-2
#+ATTR_BEAMER: :overlay <4>
#+RESULTS: iter_2-3
#+ATTR_BEAMER: :overlay <5>
#+RESULTS: iter_2-4
#+ATTR_BEAMER: :overlay <6>
#+RESULTS: iter_2-5
#+ATTR_BEAMER: :overlay <7->
#+RESULTS: iter_2-6
#+LATEX: \end{center}

** Group Activity

*** Easier
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
:END:
$f(z) = z^2 - 0.2 + 0 \symbf{i}$

$z_0 = 0.5 + 0 \symbf{i}$

*** Harder
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: block
:END:
$f(z) = z^2 -0.2 + 0.4 \symbf{i}$

$z_0 = 0.5 - 0.5 \symbf{i}$

** Group Activity (Easier)

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2 -0.2 + 0 \symbf{i}$

$z_0 = 0.5 + 0 \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = 0.5$
- $f^1(z) = 0.05$
- $f^2(z) = -0.1975$
- $f^3(z) = -0.16099375$
- $f^4(z) \approx -0.1740810125$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_3
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z - 0.2
z_0 = 0.5
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='royalblue')
#+END_SRC

#+NAME: iter_3-0
#+HEADER: :var path="Figs/exports/Iter_3-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-1
#+HEADER: :var path="Figs/exports/Iter_3-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-2
#+HEADER: :var path="Figs/exports/Iter_3-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-3
#+HEADER: :var path="Figs/exports/Iter_3-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_3-4
#+HEADER: :var path="Figs/exports/Iter_3-4.png" cnt=4
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_3>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_3-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_3-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_3-2
#+ATTR_BEAMER: :overlay <4>
#+RESULTS: iter_3-3
#+ATTR_BEAMER: :overlay <5->
#+RESULTS: iter_3-4
#+LATEX: \end{center}

** Group Activity (Harder)

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2 -0.2 + 0.4 \symbf{i}$

$z_0 = 0.5 - 0.5 \symbf{i}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = 0.5 - 0.5 \symbf{i}$
- $f^1(z) = -0.2 - 0.1 \symbf{i}$
- $f^2(z) = -0.17 + 0.44 \symbf{i}$
- $f^3(z) = -0.3647 + 0.2504 \symbf{i}$
- $f^4(z) = -0.12969407 + 0.21735824 \symbf{i}$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_4
#+BEGIN_SRC python :results file :exports none :eval no
f = lambda z: z*z - 0.2 + 0.4*sp.I
z_0 = 0.5 - 0.5*sp.I
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='forestgreen')
#+END_SRC

#+NAME: iter_4-0
#+HEADER: :var path="Figs/exports/Iter_4-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-1
#+HEADER: :var path="Figs/exports/Iter_4-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-2
#+HEADER: :var path="Figs/exports/Iter_4-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-3
#+HEADER: :var path="Figs/exports/Iter_4-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_4-4
#+HEADER: :var path="Figs/exports/Iter_4-4.png" cnt=4
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_4>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1>
#+RESULTS: iter_4-0
#+ATTR_BEAMER: :overlay <2>
#+RESULTS: iter_4-1
#+ATTR_BEAMER: :overlay <3>
#+RESULTS: iter_4-2
#+ATTR_BEAMER: :overlay <4>
#+RESULTS: iter_4-3
#+ATTR_BEAMER: :overlay <5->
#+RESULTS: iter_4-4
#+LATEX: \end{center}

** Implementation

*** Iteration (Python)
:PROPERTIES:
    :BEAMER_col: 0.50
    :BEAMER_env: block
:END:

#+BEGIN_SRC python -n :eval no
N = 128
B = 4
c = complex(-0.2, 0.4)
def iterate(z):
    for n in range(N):
        z = z*z + c
        if abs(z) > B*B: break
    return n
#+END_SRC

*** Graph
:PROPERTIES:
    :BEAMER_col: 0.45
:END:

#+NAME: iter_4-128
#+HEADER: :var path="Figs/exports/Iter_4-128.png" cnt=128
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
plt.xlim(-0.5, 0.5)
plt.ylim(-0.5, 0.5)
f = lambda z: z*z + complex(-0.2, 0.4)
z_0 = complex(0.5, -0.5)
data = np.fromiter(iter(z_0, f), 'complex', cnt+1)

plt.plot(data.real, data.imag, 'o--', color='forestgreen')
<<plt-fig-export>>
#+END_SRC

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <2-> :width 0.90\textwidth
#+RESULTS: iter_4-128
#+LATEX: \end{center}

** TODO Iterative Fractals

*** Text :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.55
:END:

**** Complex Juila Set Example

Defined by iterative function in complex space

- $f_c (z) = z^2 - 0.675 - 0.112\symbf{i}$

- $K_c = \left\{ z_0 \in \symbb{C}: \abs{f^k_c \left(z_0 \right)} > B \text{ as } k \to \infty\right\}$

*** Julia Set :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.45
:END:

#+CAPTION: $f(z) = z^2 -0.675 - 0.112\symbf{i}$
#+ATTR_LATEX: :center yes :width 0.80\textwidth
[[./Figs/Fig_2v2.png]]

* Quaternions

** Quaternions History
:PROPERTIES:
    :BEAMER_opt: b
:END:

*** Left
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

#+CAPTION: Quaternion plaque on Brougham Bridge, Dublin @@latex:\\@@ @@latex:\ccbysa@@ [[https://commons.wikimedia.org/wiki/File:Inscription_on_Broom_Bridge_(Dublin)_regarding_the_discovery_of_Quaternions_multiplication_by_Sir_William_Rowan_Hamilton.jpg][Wikipedia - Cone83]]
#+ATTR_LATEX: :width 0.90\textwidth
[[./Figs/Fig_3.jpg]]

*** Right
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

#+CAPTION: Portrait of Sir William Rowan Hamilton @@latex:\\@@ @@latex:\ccPublicDomainAlt@@ [[https://commons.wikimedia.org/wiki/File:William_Rowan_Hamilton_portrait_oval_combined.png][Wikipedia - Quibik]]
#+ATTR_LATEX: :height 0.60\textheight
[[./Figs/Fig_4.png]]

** Quaternions

*** Quaternion
:PROPERTIES:
    :BEAMER_env: definition
:END:

$\symbf{i}^2 = \symbf{j}^2 = \symbf{k}^2 = \symbf{ijk} = -1$

$\left\{ d + a\symbf{i} + b\symbf{j} + c\symbf{k} : a,b,c,d \in \symbb{R} \right\} \in \symbb{H}$

*** Proof
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

- @@b:<2->@@ $\symbf{i}^2 = \symbf{ijk}$

  \begin{talign*}
    \symbf{i}^{-1} \symbf{i}^2 & = \symbf{i}^{-1} \symbf{ijk} \\
    \symbf{i} & = \symbf{jk}
  \end{talign*}

- @@b:<3->@@ $\symbf{k}^2 = \symbf{ijk}$

  \begin{talign*}
    \symbf{k}^2 \symbf{k}^{-1} & = \symbf{ijk} \symbf{k}^{-1} \\
    \symbf{k} & = \symbf{ij}
  \end{talign*}

- @@b:<3->@@ $\symbf{j} = \symbf{ki}$

*** Proof
:PROPERTIES:
    :BEAMER_col: 0.50
:END:

- @@b:<4->@@ $\symbf{i} = \symbf{jk}$

  \begin{talign*}
    \symbf{ji} & = \symbf{jjk} \\
    \symbf{ji} & = \symbf{j}^2 \symbf{k} \\
    \symbf{ji} & = -\symbf{k} \\
    -\symbf{k} & = \symbf{ji}
  \end{talign*}

- @@b:<5->@@ $-\symbf{i} = \symbf{kj}$
- @@b:<5->@@ $-\symbf{j} = \symbf{ik}$

** Quaternion Multiplication
:PROPERTIES:
    :BEAMER_env: fullframe
:END:

*** Let,

$\symbf{i}^2 = \symbf{j}^2 = \symbf{k}^2 = \symbf{ijk} = -1$

$p = d + a\symbf{i} + b\symbf{j} + c\symbf{k}$

$q = w + x\symbf{i} + y\symbf{j} + z\symbf{k}$

*** Equation :ignore:

\begin{align*}
    p \ast q \only<1-2>{& = dw + dx\symbf{i} + dy\symbf{j} + dz\symbf{k} \\}
    \only<1-2>{& + aw\symbf{i} + ax\symbf{i}^2 + ay\symbf{ij} + az\symbf{ik} \\}
    \only<1-2>{& + bw\symbf{j} + bx\symbf{ji} + by\symbf{j}^2 + bz\symbf{jk} \\}
    \only<1-2>{& + cw\symbf{k} + cx\symbf{ki} + cy\symbf{kj} + cz\symbf{k}^2 \\}
    \only<2-3>{& = dw - ax - by - cz \\}
    \only<4>{& = dw - (ax + by + cz) \\}
    \only<5->{& = dw - \begin{asvector} a\\b\\c \end{asvector} \cdot \begin{asvector} x\\y\\z \end{asvector} \\}
    \only<2-5>{& + dx\symbf{i} + aw\symbf{i} + bz\symbf{i} - cy\symbf{i} \\}
    \only<2-5>{& + dy\symbf{j} - az\symbf{j} + bw\symbf{j} + cx\symbf{j} \\}
    \only<2-5>{& + dz\symbf{k} + ay\symbf{k} - bx\symbf{k} + cw\symbf{k} \\}
    \onslide<6->{& + \begin{avector}}
    \onslide<6->{dx + aw + bz - cy \\}
    \onslide<6->{dy - az + bw + cx \\}
    \onslide<6->{dz + ay - bx + cw}
    \onslide<6->{\end{avector}}
    \onslide<6->{\cdot \begin{avector} \symbf{i} \\ \symbf{j} \\ \symbf{k} \end{avector} \\}
    \onslide<7->{& = dw - \begin{asvector} a\\b\\c \end{asvector} \cdot \begin{asvector} x\\y\\z \end{asvector} + \left(d \begin{asvector} x\\y\\z \end{asvector} \only<8->{+ w \begin{asvector} a\\b\\c \end{asvector}} \only<9->{+ \begin{asvector} a\\b\\c \end{asvector} \times \begin{asvector} x\\y\\z \end{asvector}} \only<7-8>{\cdots} \right) \cdot \begin{asvector} \symbf{i}\\\symbf{j}\\\symbf{k} \end{asvector}}
\end{align*}

* Quaternion Iterative Methods

** Implementation

*** Quaternion Multiplication

#+BEGIN_SRC python -n :eval no
def q_mult(p, q):
    r = Quat(
        p.r*q.r – p.i*q.i – p.j*q.j - p.k*q.k,
        p.r*q.i + p.i*q.r + p.j*q.k - p.k*q.j,
        p.r*q.j – p.i*q.k + p.j*q.r + p.j*q.i,
        p.r*q.k + p.i*q.j – p.j*q.i + p.k*q.r
    )
    return r
#+END_SRC

** Implementation

*** Quaternion Square

#+BEGIN_SRC python -n :eval no
def q_square(q):
    r = Quat(
        q.r*q.r – q.i*q.i – q.j*q.j - q.k*q.k,
        2*q.r*q.i,
        2*q.r*q.j,
        2*q.r*q.k
    )
    return r
#+END_SRC

** Implementation

*** Quaternion Add

#+BEGIN_SRC python -n :eval no
def q_add(p, q):
    r = Quat(
        p.r + q.r,
        p.i + q.i,
        p.j + q.j,
        p.k + q.k
    )
    return r
#+END_SRC

** Implementation

*** Iteration

#+BEGIN_SRC python -n :eval no
N = 12
B = 16
q = Quat(-0.2, 0.4, -0.4, -0.4)
def iterate(z):
    for n in range(N):
        z = q_add(q_square(z), q)
        if q_abs(z) > B*B: break
    return n
#+END_SRC

** Iteration

*** Text
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Rules
:PROPERTIES:
    :BEAMER_env: block
:END:

$f(z) = z^2 + 0.3 - 0.375\symbf{i} - 0.675\symbf{j} - 0.112\symbf{k}$

$z_0 = 0.5 - 0.5\symbf{i} + 0.5\symbf{j} - 0.5\symbf{k}$

**** The Rest :ignore:

#+ATTR_BEAMER: :overlay <+->
- $f^0(z) = 0.5 - 0.5\symbf{i} + 0.5\symbf{j} - 0.5\symbf{k}$
- $f^1(z) = -0.2 - 0.875\symbf{i} - 0.175\symbf{j} - 0.612\symbf{k}$
- $f^2(z) = -0.831 - 0.025\symbf{i} - 0.605\symbf{j} + 0.133\symbf{k}$
- $f^3(z) \approx 0.6066 - 0.333\symbf{i} + 0.330\symbf{j} - 0.333\symbf{k}$
- $f^4(z) \approx 0.336 - 0.779\symbf{i} - 0.274\symbf{j} - 0.515\symbf{k}$
- $f^5(z) \approx -0.535 - 0.899\symbf{i} - 0.860\symbf{j} - 0.458\symbf{k}$

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_5
#+BEGIN_SRC python :results file :exports none :eval no
mpl.rcParams['font.size'] = 10.0
import quaternion
f = lambda z: z*z + np.quaternion(0.3,-.375,-.675,-.112)
z_0 = np.quaternion(0.5, -0.5, 0.5, -0.5)
data = np.fromiter(iter(z_0, f), 'quaternion', cnt+1)
w = []
x = []
y = []
z = []
for quat in data:
    w.append(quat.w)
    x.append(quat.x)
    y.append(quat.y)
    z.append(quat.z)
ax_map = {'Real': w, 'i': x, 'j': y, 'k': z}

selected_ax = (('Real', 'i'),('Real','j'),('Real','k'),('j','k'))
fig, axs = plt.subplots(2, 2)
fig.subplots_adjust(hspace = 0.3)
for ax in zip(axs.flat, selected_ax):
    ax[0].set(xlim=(-1.5, 1.5), ylim = (-1.5, 1.5),
              xlabel=ax[1][0], ylabel=ax[1][1],
              aspect=1)
    ax[0].plot(ax_map[ax[1][0]], ax_map[ax[1][1]], 'o--', color='royalblue')
#+END_SRC

#+NAME: iter_5-0
#+HEADER: :var path="Figs/exports/Iter_5-0.png" cnt=0
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_5>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_5-1
#+HEADER: :var path="Figs/exports/Iter_5-1.png" cnt=1
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_5>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_5-2
#+HEADER: :var path="Figs/exports/Iter_5-2.png" cnt=2
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_5>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_5-3
#+HEADER: :var path="Figs/exports/Iter_5-3.png" cnt=3
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_5>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_5-4
#+HEADER: :var path="Figs/exports/Iter_5-4.png" cnt=4
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_5>>
<<plt-fig-export>>
#+END_SRC

#+NAME: iter_5-5
#+HEADER: :var path="Figs/exports/Iter_5-5.png" cnt=5
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_5>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+LATEX: \begin{center}
#+ATTR_BEAMER: :overlay <1> :height 0.70\textheight
#+RESULTS: iter_5-0
#+ATTR_BEAMER: :overlay <2> :height 0.70\textheight
#+RESULTS: iter_5-1
#+ATTR_BEAMER: :overlay <3> :height 0.70\textheight
#+RESULTS: iter_5-2
#+ATTR_BEAMER: :overlay <4> :height 0.70\textheight
#+RESULTS: iter_5-3
#+ATTR_BEAMER: :overlay <5> :height 0.70\textheight
#+RESULTS: iter_5-4
#+ATTR_BEAMER: :overlay <6> :height 0.70\textheight
#+RESULTS: iter_5-5
#+LATEX: \end{center}

** Plotting
:PROPERTIES:
    :BEAMER_opt: b
:END:

*** Pane 1
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

**** Generator :ignore:

#+NAME: iter_5-12
#+HEADER: :var path="Figs/exports/Iter_5-12.png" cnt=12
#+BEGIN_SRC python :exports results :noweb strip-export :results file :eval export
<<plt-fig-preamble>>
<<plt-iteration>>
<<iter_5>>
<<plt-fig-export>>
#+END_SRC

**** Results :ignore:

#+CAPTION: $f(z) = z^2 + 0.3 - 0.375\symbf{i} - 0.675\symbf{j} - 0.112\symbf{k}$ @@latex:\\@@ $f^{12}(0.5 - 0.5\symbf{i} + 0.5\symbf{j} - 0.5\symbf{k})$
#+ATTR_LATEX: :center yes :width 0.75\textwidth
#+RESULTS: iter_5-12

*** Pane 2
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

#+CAPTION: $f(z) = z^2 + 0.3 - 0.375\symbf{i} - 0.675\symbf{j} - 0.112\symbf{k}$ @@latex:\\@@ Axis: Real, $\symbf{i}, \symbf{j}$
#+ATTR_LATEX: :center yes :width 0.75\textwidth
[[./Figs/Fig_1v2.png]]

** Ray Tracing

#+CAPTION: Ray Tracing Diagram @@latex:\\@@ @@latex:\ccbysa@@ [[https://commons.wikimedia.org/wiki/File:Ray_trace_diagram.svg][Wikipedia - Henrik]] with modifications
#+ATTR_LATEX: :height 0.60\textheight
[[./Figs/Fig_5-1.svg]]

** Ray Marching

*** Image
:PROPERTIES:
    :BEAMER_col: 0.5
:END:

#+CAPTION: Ray Marching @@latex:\\@@ @@latex:\ccCopy@@ [[http://celarek.at/2014/05/real-time-3d-mandelbulb/][Adam Celarek]]
[[./Figs/Fig_6.png]]

*** Distance Estimation
:PROPERTIES:
    :BEAMER_col: 0.5
    :BEAMER_env: theorem
:END:

Let $f(z) = z^m + q$ where $q \in \symbb{H}, m \in \symbb{Z}^+$ be the iterative function of a Julia fractal. Then, the distance, $\delta$, to the fractal can be approximated by
\begin{align*}
    a \frac{z_n}{z_n'} < \delta
\end{align*}
where $a \in \symbb{R}$ is some constant coefficient.

** Normal Estimation

#+CAPTION: Ray Tracing Diagram @@latex:\\@@ @@latex:\ccbysa@@ [[https://commons.wikimedia.org/wiki/File:Ray_trace_diagram.svg][Wikipedia - Henrik]] with modifications
#+ATTR_LATEX: :height 0.60\textheight
[[./Figs/Fig_5-2.svg]]

** TODO Quaternion Iterative Fractals

*** Quaternion Juila Set Example :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.55
    :BEAMER_env: block
:END:

- Defined by iterative function in 4D Quaternion space

*** Quaternion Julia Set :BMCOL:
:PROPERTIES:
    :BEAMER_col: 0.45
:END:

#+LATEX: \begin{figure}
#+LATEX: \animategraphics[autoplay,interpolate,width=0.75\textwidth,loop,palindrome]{2}{Figs/Iter_Q/}{1}{11}
#+LATEX: \caption{\(f(z) = z^2 + 0.3 - 0.375\symbf{i} - 0.675\symbf{j} - 0.112\symbf{k}\) \\ Axis: Real, \(\symbf{i}, \symbf{j}\) \\ N = 1-11}
#+LATEX: \end{figure}

** Summary

#+LATEX:
#+TOC: headlines 2

** References
:PROPERTIES:
    :BEAMER_opt: allowframebreaks,label=
 :END:
#+LATEX: \nocite{*}
#+LATEX: \bibliography{sources}
#+LATEX: \bibliographystyle{alpha}

** Questions?

#+LATEX: \begin{center}
[[https://github.com/scrufulufugus/senior-synthesis]]

#+ATTR_LATEX: :height 0.70\textheight
[[./Figs/qr.png]]
#+LATEX: \end{center}
